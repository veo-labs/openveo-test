{
    "project": {
        "name": "OpenVeo test API",
        "description": "Unit tests and end to end tests API for OpenVeo",
        "version": "6.0.0"
    },
    "files": {
        "lib/e2e/assertions/TableAssert.js": {
            "name": "lib/e2e/assertions/TableAssert.js",
            "modules": {},
            "classes": {
                "TableAssert": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/CheckboxField.js": {
            "name": "lib/e2e/fields/CheckboxField.js",
            "modules": {},
            "classes": {
                "CheckboxField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/CheckboxesField.js": {
            "name": "lib/e2e/fields/CheckboxesField.js",
            "modules": {},
            "classes": {
                "CheckboxesField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/DateField.js": {
            "name": "lib/e2e/fields/DateField.js",
            "modules": {},
            "classes": {
                "DateField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/FakeField.js": {
            "name": "lib/e2e/fields/FakeField.js",
            "modules": {},
            "classes": {
                "FakeField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/Field.js": {
            "name": "lib/e2e/fields/Field.js",
            "modules": {},
            "classes": {
                "Field": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/MatchField.js": {
            "name": "lib/e2e/fields/MatchField.js",
            "modules": {},
            "classes": {
                "MatchField": 1,
                "MatchTextField": 1,
                "MatchTagsField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/SelectField.js": {
            "name": "lib/e2e/fields/SelectField.js",
            "modules": {},
            "classes": {
                "SelectField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/TagsField.js": {
            "name": "lib/e2e/fields/TagsField.js",
            "modules": {},
            "classes": {
                "TagsField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/TextField.js": {
            "name": "lib/e2e/fields/TextField.js",
            "modules": {},
            "classes": {
                "TextField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/TextareaField.js": {
            "name": "lib/e2e/fields/TextareaField.js",
            "modules": {},
            "classes": {
                "TextareaField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/TimeField.js": {
            "name": "lib/e2e/fields/TimeField.js",
            "modules": {},
            "classes": {
                "TimeField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/fields/TinyMCEField.js": {
            "name": "lib/e2e/fields/TinyMCEField.js",
            "modules": {},
            "classes": {
                "TinyMCEField": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/helpers/Helper.js": {
            "name": "lib/e2e/helpers/Helper.js",
            "modules": {},
            "classes": {
                "Helper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/pages/BackEndPage.js": {
            "name": "lib/e2e/pages/BackEndPage.js",
            "modules": {},
            "classes": {
                "BackEndPage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/pages/Page.js": {
            "name": "lib/e2e/pages/Page.js",
            "modules": {},
            "classes": {
                "Page": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/pages/TablePage.js": {
            "name": "lib/e2e/pages/TablePage.js",
            "modules": {},
            "classes": {
                "TablePage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/plugins/screenshotPlugin.js": {
            "name": "lib/e2e/plugins/screenshotPlugin.js",
            "modules": {},
            "classes": {
                "screenshotPlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/browser.js": {
            "name": "lib/e2e/browser.js",
            "modules": {},
            "classes": {
                "browser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/e2e.js": {
            "name": "lib/e2e/e2e.js",
            "modules": {
                "e2e": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/e2e/i18n.js": {
            "name": "lib/e2e/i18n.js",
            "modules": {},
            "classes": {
                "i18n": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/unit/plugins/karma-ng-inline-templates-preprocessor/index.js": {
            "name": "lib/unit/plugins/karma-ng-inline-templates-preprocessor/index.js",
            "modules": {},
            "classes": {
                "karma-ng-inline-templates-preprocessor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/unit/unit.js": {
            "name": "lib/unit/unit.js",
            "modules": {
                "unit": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util.js": {
            "name": "lib/util.js",
            "modules": {
                "util": 1
            },
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "e2e": {
            "name": "e2e",
            "submodules": {},
            "elements": {},
            "classes": {
                "TableAssert": 1,
                "CheckboxField": 1,
                "CheckboxesField": 1,
                "DateField": 1,
                "FakeField": 1,
                "Field": 1,
                "MatchField": 1,
                "MatchTextField": 1,
                "MatchTagsField": 1,
                "SelectField": 1,
                "TagsField": 1,
                "TextField": 1,
                "TextareaField": 1,
                "TimeField": 1,
                "TinyMCEField": 1,
                "Helper": 1,
                "BackEndPage": 1,
                "Page": 1,
                "TablePage": 1,
                "screenshotPlugin": 1,
                "browser": 1,
                "i18n": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/e2e/i18n.js",
            "line": 7,
            "description": "Exposes a list of modules to help writing end to end tests on OpenVeo using protractor.\n\n    require('@openveo/test').e2e;",
            "itemtype": "main"
        },
        "unit": {
            "name": "unit",
            "submodules": {},
            "elements": {},
            "classes": {
                "karma-ng-inline-templates-preprocessor": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/unit/plugins/karma-ng-inline-templates-preprocessor/index.js",
            "line": 9,
            "description": "Exposes a list of modules to help writing server unit tests on OpenVeo using mocha.\n\n    require('@openveo/test').ut;",
            "itemtype": "main"
        },
        "util": {
            "name": "util",
            "submodules": {},
            "elements": {},
            "classes": {
                "util": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "lib/util.js",
            "line": 3,
            "description": "Exposes a list of functions to help writing tests.",
            "itemtype": "main"
        }
    },
    "classes": {
        "TableAssert": {
            "name": "TableAssert",
            "shortname": "TableAssert",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 15,
            "description": "Defines a table assertion helper to help writing assertions for table pages.",
            "example": [
                "\n\n    var TableAssert = require('@openveo/test').e2e.asserts.TableAssert;\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "page",
                    "description": "The table page to test",
                    "type": "TablePage"
                },
                {
                    "name": "helper",
                    "description": "The helper to manipulate entities without interacting with the web browser",
                    "type": "Helper"
                }
            ]
        },
        "CheckboxField": {
            "name": "CheckboxField",
            "shortname": "CheckboxField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/CheckboxField.js",
            "line": 11,
            "description": "Defines a form checkbox field.\n\nUse Field.get method to get an instance of CheckboxField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var CheckboxField = Field.get({\n      type: 'checkbox',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "CheckboxesField": {
            "name": "CheckboxesField",
            "shortname": "CheckboxesField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/CheckboxesField.js",
            "line": 11,
            "description": "Defines a form checkboxes field.\n\nUse Field.get method to get an instance of CheckboxesField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var CheckboxesField = Field.get({\n      type: 'checkboxes',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "DateField": {
            "name": "DateField",
            "shortname": "DateField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/DateField.js",
            "line": 10,
            "description": "Defines a form date field.\n\nUse Field.get method to get an instance of DateField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var myDateField = Field.get({\n      type: 'date',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "TextField",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "FakeField": {
            "name": "FakeField",
            "shortname": "FakeField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/FakeField.js",
            "line": 10,
            "description": "Defines a form fake field.\n\nFakeField is not really a field, it is just a simple text with a label.\nUse Field.get method to get an instance of FakeField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var myFakeField = Field.get({\n      type: 'fake',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "Field": {
            "name": "Field",
            "shortname": "Field",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/Field.js",
            "line": 7,
            "description": "Defines a form field to help writing end to end tests.\n\nHelp manipulate form fields in a Page.\nUse Field.get() method to get a Field instance.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "MatchField": {
            "name": "MatchField",
            "shortname": "MatchField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/MatchField.js",
            "line": 13,
            "description": "Defines a form match field.\n\nUse Field.get method to get an instance of MatchField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var MatchField = Field.get({\n      type: 'match',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "MatchTextField": {
            "name": "MatchTextField",
            "shortname": "MatchTextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/MatchField.js",
            "line": 52,
            "description": "Defines a MatchTextField.\n\nA MatchTextField is a field part of a match, it is pretty much like\na TextField except that it is part of a match.",
            "extends": "TextField",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "Field configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Field configuration",
                            "type": "String"
                        },
                        {
                            "name": "baseElement",
                            "description": "The match element",
                            "type": "ElementFinder"
                        }
                    ]
                }
            ]
        },
        "MatchTagsField": {
            "name": "MatchTagsField",
            "shortname": "MatchTagsField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/MatchField.js",
            "line": 80,
            "description": "Defines a MatchTagsField.\n\nA MatchTagsField is a field part of a match, it is pretty much like\na TagsField except that it is part of a match.",
            "extends": "TagsField",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "Field configuration",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "Field configuration",
                            "type": "String"
                        },
                        {
                            "name": "baseElement",
                            "description": "The match element",
                            "type": "ElementFinder"
                        }
                    ]
                }
            ]
        },
        "SelectField": {
            "name": "SelectField",
            "shortname": "SelectField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/SelectField.js",
            "line": 11,
            "description": "Defines a form select field.\n\nUse Field.get method to get an instance of SelectField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var mySelectField = Field.get({\n      type: 'select',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1
        },
        "TagsField": {
            "name": "TagsField",
            "shortname": "TagsField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/TagsField.js",
            "line": 11,
            "description": "Defines a form tags field.\n\nUse Field.get method to get an instance of TagsField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var TagsField = Field.get({\n      type: 'tags',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "TextField": {
            "name": "TextField",
            "shortname": "TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/TextField.js",
            "line": 10,
            "description": "Defines a form text field.\n\nUse Field.get method to get an instance of TextField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var myTextField = Field.get({\n      type: 'text',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "TextareaField": {
            "name": "TextareaField",
            "shortname": "TextareaField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/TextareaField.js",
            "line": 10,
            "description": "Defines a form text field.\n\nUse Field.get method to get an instance of TextareaField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var myTextareaField = Field.get({\n      type: 'textarea',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "TimeField": {
            "name": "TimeField",
            "shortname": "TimeField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/TimeField.js",
            "line": 10,
            "description": "Defines a form time field.\n\nUse Field.get method to get an instance of TimeField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var TimeField = Field.get({\n      type: 'time',\n      name: 'My time field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "TinyMCEField": {
            "name": "TinyMCEField",
            "shortname": "TinyMCEField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/fields/TinyMCEField.js",
            "line": 10,
            "description": "Defines a form tinyIMCE field.\n\nUse Field.get method to get an instance of TinyMCEField.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var myTinyMCEField = Field.get({\n      type: 'tinymce',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "extends": "Field",
            "is_constructor": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ]
        },
        "Helper": {
            "name": "Helper",
            "shortname": "Helper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/helpers/Helper.js",
            "line": 10,
            "description": "Helpers intends to use EntityProviders to manipulate the Database without requesting the web browser but staying in\nprotractor's control flow.\n\nDo not use this directly but extend it.",
            "example": [
                "\n\n    var Helper = require('@openveo/test').e2e.helpers.Helper;\n\n    function MyHelper(provider) {\n      MyHelper.super_.call(this);\n    }\n\n    module.exports = MyHelper;\n    util.inherits(MyHelper, Helper);\n\n    var helper = new MyHelper(new MyProvider());"
            ],
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "The entity provider that will be used by the Helper",
                    "type": "EntityProvider"
                }
            ]
        },
        "BackEndPage": {
            "name": "BackEndPage",
            "shortname": "BackEndPage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 26,
            "description": "Defines a back end page to help writing end to end tests on OpenVeo back end pages.\n\nDo not use this directly but extend it.",
            "example": [
                "\n\n    var BackEndPage = require('@openveo/test').e2e.pages.BackEndPage;\n\n    function MyBackEndPage() {\n      MyBackEndPage.super_.call(this);\n      this.path = 'be/myBackEndPage';\n    }\n\n    module.exports = MyBackEndPage;\n    util.inherits(MyBackEndPage, BackEndPage);\n\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.load().then(function() {\n      console.log('Page fully loaded in the first language of the list of languages');\n    });"
            ],
            "extends": "Page",
            "is_constructor": 1
        },
        "Page": {
            "name": "Page",
            "shortname": "Page",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/pages/Page.js",
            "line": 9,
            "description": "Defines a web page to help writing end to end tests with protractor for OpenVeo.\n\nDo not use this directly but extend it.",
            "example": [
                "\n\n    var Page = require('@openveo/test').e2e.pages.Page;\n\n    function MyPage() {\n      MyPage.super_.call(this);\n      this.path = 'be/myPage';\n    }\n\n    module.exports = MyPage;\n    util.inherits(MyPage, Page);\n\n    var page = new MyPage();\n    page.load().then(function() {\n      console.log('Page fully loaded');\n    });"
            ],
            "is_constructor": 1
        },
        "TablePage": {
            "name": "TablePage",
            "shortname": "TablePage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/pages/TablePage.js",
            "line": 11,
            "description": "Defines a TablePage representing a back end page with a table and form to add an entity.\n\nDo not use this directly but extend it.",
            "example": [
                "\n\n    var TablePage = require('@openveo/test').e2e.pages.TablePage;\n\n    function MyTablePage() {\n      MyTablePage.super_.call(this);\n      this.path = 'be/myTablePage';\n    }\n\n    module.exports = MyTablePage;\n    util.inherits(MyTablePage, TablePage);\n\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load().then(function() {\n      console.log('Page fully loaded in the first language');\n    });"
            ],
            "extends": "BackEndPage",
            "is_constructor": 1,
            "params": [
                {
                    "name": "provider",
                    "description": "Provider to interact directly with the database",
                    "type": "EntityProvider"
                }
            ]
        },
        "screenshotPlugin": {
            "name": "screenshotPlugin",
            "shortname": "screenshotPlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/plugins/screenshotPlugin.js",
            "line": 13,
            "description": "Defines a protractor screenshot plugin to capture an image if a test failed.",
            "example": [
                "\n\n    // In protractor configuration file\n    plugins: [\n      {\n\n         // Path to the directory which will hold the taken screenshots\n         outdir: 'build/screenshots',\n\n         // Load the plugin\n         inline: require('@openveo/test').e2e.plugins.screenshotPlugin\n      }\n    ]"
            ]
        },
        "browser": {
            "name": "browser",
            "shortname": "browser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/browser.js",
            "line": 7,
            "description": "Helps using some protractor browser's features.",
            "static": 1
        },
        "i18n": {
            "name": "i18n",
            "shortname": "i18n",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "e2e",
            "namespace": "",
            "file": "lib/e2e/i18n.js",
            "line": 7,
            "description": "Helps retrieving project's translations.",
            "static": 1
        },
        "karma-ng-inline-templates-preprocessor": {
            "name": "karma-ng-inline-templates-preprocessor",
            "shortname": "karma-ng-inline-templates-preprocessor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "unit",
            "namespace": "",
            "file": "lib/unit/plugins/karma-ng-inline-templates-preprocessor/index.js",
            "line": 9,
            "description": "Defines an inline template preprocessor.",
            "example": [
                "\n\n    // Configuration example to put in your karma configuration file\n    {\n      moduleName: 'my-inline-templates' // Name of the AngularJS module that will be created to hold templates\n    }",
                "\n\n    // Don't forget to load the module before executing your tests\n    beforeEach(function() {\n      module('my-inline-templates');\n    });"
            ],
            "params": [
                {
                    "name": "logger",
                    "description": "Karma logger",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "Inline templates preprocessor configuration",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Preprocessor function to call for each file",
                "type": "Function"
            }
        },
        "util": {
            "name": "util",
            "shortname": "util",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "util",
            "namespace": "",
            "file": "lib/util.js",
            "line": 3,
            "description": "Exposes a list of functions to help writing tests.",
            "mainName": "util",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 35,
            "description": "The page containing the table to test.",
            "itemtype": "property",
            "name": "page",
            "type": "TablePage",
            "final": 1,
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 44,
            "description": "The helper to manipulate entities.",
            "itemtype": "property",
            "name": "helper",
            "type": "Helper",
            "final": 1,
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 58,
            "description": "Checks that table navigation is working.\n\nUse table navigation links to navigate on pages and verify, on each page, the current page, total pages,\ntotal lines and the number of lines in the page.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkPagination(50, 10);"
            ],
            "itemtype": "method",
            "name": "checkNavigation",
            "params": [
                {
                    "name": "totalElements",
                    "description": "The total number of elements",
                    "type": "Number"
                },
                {
                    "name": "numberPerPage",
                    "description": "The number of elements displayed per page",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "The page index",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving when navigation has been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 111,
            "description": "Checks if lines are correctly sorted for both ascending and descending order.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using helper addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkSort('My column');"
            ],
            "itemtype": "method",
            "name": "checkSort",
            "params": [
                {
                    "name": "property",
                    "description": "The name of the column to sort on",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when sort has been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 181,
            "description": "Checks if buttons to change the number of displayed items per page are displayed correctly depending on the\nactual number of lines in the table.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkItemsPerPageButtons();"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "checkItemsPerPageButtons",
            "return": {
                "description": "Promise resolving when buttons have been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 217,
            "description": "Checks if buttons to change the number of displayed items per page are correctly displayed regarding the\ntotal number of lines.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using page addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkItemsPerPage();"
            ],
            "itemtype": "method",
            "name": "checkItemsPerPage",
            "return": {
                "description": "Promise resolving when buttons per page have been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 298,
            "description": "Checks if removing several lines at the same time works correctly.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using page addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkMassiveRemove();"
            ],
            "itemtype": "method",
            "name": "checkMassiveRemove",
            "return": {
                "description": "Promise resolving when massive remove has been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 348,
            "description": "Checks if pagination works correctly.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using page addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkPagination();"
            ],
            "itemtype": "method",
            "name": "checkPagination",
            "return": {
                "description": "Promise resolving when pagination has been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 410,
            "description": "Checks if search engine works correctly.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n\n    var expectedValues = ['Test 1', 'Test 2'];\n    var search = { name: 'Name' };\n\n    // Execute search and get all values of column 'Name' then compare this values to the expected values\n    tableAssert.checkSearch(search, expectedValues, 'Name');"
            ],
            "itemtype": "method",
            "name": "checkSearch",
            "params": [
                {
                    "name": "search",
                    "description": "A search description object",
                    "type": "Object"
                },
                {
                    "name": "expectedValues",
                    "description": "The expected list of line values corresponding to the research",
                    "type": "Array"
                },
                {
                    "name": "columnName",
                    "description": "The name of the column to extract value from and compare to expectedValues",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when search has been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 454,
            "description": "Checks if canceling a remove action is working correctly.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using page addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkCancelRemove();"
            ],
            "itemtype": "method",
            "name": "checkCancelRemove",
            "return": {
                "description": "Promise resolving when cancel is checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 501,
            "description": "Checks if selecting lines works.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using page addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkLinesSelection();"
            ],
            "itemtype": "method",
            "name": "checkLinesSelection",
            "params": [
                {
                    "name": "nameProperty",
                    "description": "The property holding the name of the entity",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when selection have been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/assertions/TableAssert.js",
            "line": 593,
            "description": "Checks that line actions and global actions are the same.\n\nYou don't need to add lines to the table before calling this method. Necessary lines are automatically added\nand then removed using page addEntitiesAuto / removeEntities methods.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    var helper = new MyHelper(new MyProvider());\n    var tableAssert = new TableAssert(page, helper);\n    tableAssert.checkActions(['Action 1', 'Action 2']);"
            ],
            "itemtype": "method",
            "name": "checkActions",
            "params": [
                {
                    "name": "expectedActions",
                    "description": "Expected actions",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolving when actions have been checked",
                "type": "Promise"
            },
            "class": "TableAssert",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxField.js",
            "line": 38,
            "description": "Gets selected checkbox name.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log(value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with selected checkbox",
                "type": "Promise"
            },
            "class": "CheckboxField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxField.js",
            "line": 59,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue(true).then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Checkbox's value",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Promise resolving when checkbox is checked / unchecked",
                "type": "Promise"
            },
            "class": "CheckboxField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxField.js",
            "line": 84,
            "description": "Unchecks the checkbox.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "CheckboxField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxesField.js",
            "line": 38,
            "description": "Gets selected checkboxe names.",
            "example": [
                "\n\n    myField.getValue().then(function(values) {\n      console.log(values);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with selected checkboxes",
                "type": "Promise"
            },
            "class": "CheckboxesField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxesField.js",
            "line": 76,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue(['Label 1', 'Label 2']).then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "values",
                    "description": "Checkboxe's values",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                }
            ],
            "return": {
                "description": "Promise resolving when checkboxes are checked",
                "type": "Promise"
            },
            "class": "CheckboxesField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxesField.js",
            "line": 121,
            "description": "Unchecks all checkboxes.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "CheckboxesField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/CheckboxesField.js",
            "line": 137,
            "description": "Gets all checkboxes labels.",
            "example": [
                "\n\n    myField.getOptions().then(function(options) {\n      console.log(options);\n    });"
            ],
            "itemtype": "method",
            "name": "getOptions",
            "return": {
                "description": "Promise resolving with checkboxes options",
                "type": "Promise"
            },
            "class": "CheckboxesField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/FakeField.js",
            "line": 38,
            "description": "Gets fake field text.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log('Got text: ' + value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with field text",
                "type": "Promise"
            },
            "class": "FakeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/FakeField.js",
            "line": 54,
            "description": "Sets field value.\n\nDoes not do anything as this is not a real field.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Field's value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "return": {
                "description": "Promise resolving immediately",
                "type": "Promise"
            },
            "class": "FakeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/FakeField.js",
            "line": 67,
            "description": "Clears field value.\n\nDoes not do anything as this is not a real field.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving immediately",
                "type": "Promise"
            },
            "class": "FakeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/FakeField.js",
            "line": 79,
            "description": "Tests if a field is considered as on error.\n\nDoes not do anything as this is not a real field.",
            "itemtype": "method",
            "name": "isOnError",
            "return": {
                "description": "Promise resolving with false as it is not a real field, it couldn't be in error",
                "type": "Promise"
            },
            "class": "FakeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 20,
            "description": "Field label.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "final": 1,
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 29,
            "description": "Element from where to look for the field (typically the form element).",
            "itemtype": "property",
            "name": "baseElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 46,
            "description": "Gets an instance of a Field.",
            "example": [
                "\n\n    var Field = require('@openveo/test').e2e.fields.Field;\n\n    var myTextField = Field.get({\n      type: 'text',\n      name: 'My field',\n      baseElement: element(by.css('form'))\n    });"
            ],
            "itemtype": "method",
            "name": "get",
            "static": 1,
            "params": [
                {
                    "name": "conf",
                    "description": "A field configuration object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of a Field sub object",
                "type": "Field"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 115,
            "description": "Gets field description.",
            "example": [
                "\n\n    myField.getDescription().then(function(description) {\n      console.log('Field description is : ' + description);\n    });"
            ],
            "itemtype": "method",
            "name": "getDescription",
            "return": {
                "description": "Promise resolving with the description",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 134,
            "description": "Gets field label.",
            "example": [
                "\n\n    myField.getLabel().then(function(label) {\n      console.log('Field label is : ' + label);\n    });"
            ],
            "itemtype": "method",
            "name": "getLabel",
            "return": {
                "description": "Promise resolving with the label",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 155,
            "description": "Gets field element wrapper.\n\nLook for a form element label and return its parent.",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "Promise resolving with the element",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 192,
            "description": "Gets field error message.",
            "example": [
                "\n\n    myField.getErrorMessage().then(function(errorMessage) {\n      console.log('Error message : ' + errorMessage);\n    });"
            ],
            "itemtype": "method",
            "name": "getErrorMessage",
            "return": {
                "description": "Promise resolving with the error message",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 213,
            "description": "Gets field text representation in case of an inline editable field.",
            "example": [
                "\n\n    myField.getText().then(function(text) {\n      console.log(text);\n    });"
            ],
            "itemtype": "method",
            "name": "getText",
            "return": {
                "description": "Promise resolving with field text representation",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 234,
            "description": "Gets field value.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log(value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with field value",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 250,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue('new value').then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Field's value depending on its type",
                    "type": "String|Object|Number|Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving when the value is set",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 267,
            "description": "Clears field value.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/Field.js",
            "line": 283,
            "description": "Tests if a field is considered as on error.",
            "example": [
                "\n\n    myField.isOnError().then(function(isOnError) {\n      console.log('Is field on error ? ' + isOnError);\n    });"
            ],
            "itemtype": "method",
            "name": "isOnError",
            "return": {
                "description": "Promise resolving with a boolean indicating if the field is on error",
                "type": "Promise"
            },
            "class": "Field",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 38,
            "description": "The list of available options for tags.",
            "itemtype": "property",
            "name": "availableOptions",
            "type": "Array",
            "class": "MatchField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 70,
            "description": "Gets match text field element wrapper.",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "Promise resolving with the element",
                "type": "Promise"
            },
            "class": "MatchTextField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 98,
            "description": "Gets match tags field element wrapper.",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "Promise resolving with the element",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 108,
            "description": "Gets value of a match.",
            "itemtype": "method",
            "name": "getMatchValue",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Promise resolving with the value of the match",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 137,
            "description": "Removes a match by clicking on the remove button.",
            "itemtype": "method",
            "name": "removeMatch",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Promise resolving with the value of the match",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 149,
            "description": "Adds a new match using add button, text field and tags field.",
            "itemtype": "method",
            "name": "addMatchValue",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Promise resolving when match has been added",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 185,
            "description": "Adds a new match using add button, text field and tags field with auto completion.",
            "itemtype": "method",
            "name": "addMatchValueUsingAutoCompletion",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Promise resolving when match has been added",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 221,
            "description": "Gets field value, the list of associations (matches).",
            "example": [
                "\n\n    myField.getValue().then(function(matches) {\n      console.log(matches);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with the list of matches",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 254,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue([\n      {\n        text: 'text',\n        tags: ['tags1', 'tags2', 'tags3']\n      },\n      {\n        text: 'text2',\n        tags: ['tags4', 'tags5', 'tags6']\n      }\n    ]).then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "values",
                    "description": "List of matches",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 293,
            "description": "Sets field value using auto completion.",
            "example": [
                "\n\n    myField.setValueUsingAutoCompletion([\n      {\n        text: 'text',\n        tags: ['tags1', 'tags2', 'tags3']\n      },\n      {\n        text: 'text2',\n        tags: ['tags4', 'tags5', 'tags6']\n      }\n    ]).then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValueUsingAutoCompletion",
            "params": [
                {
                    "name": "values",
                    "description": "List of matches",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 332,
            "description": "Clears field value by removing all tags.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 363,
            "description": "Tests if field is considered as on error.",
            "example": [
                "\n\n    myField.isOnError().then(function(isOnError) {\n      console.log('Is field on error ? ' + isOnError);\n    });"
            ],
            "itemtype": "method",
            "name": "isOnError",
            "return": {
                "description": "Promise resolving with a boolean indicating if the field is on error",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 385,
            "description": "Gets the add button label.",
            "example": [
                "\n\n    myField.getAddLabel().then(function(label) {\n      console.log('Add button label: ' + label);\n    });"
            ],
            "itemtype": "method",
            "name": "getAddLabel",
            "return": {
                "description": "Promise resolving with the button label",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 403,
            "description": "Gets the input placeholder.",
            "example": [
                "\n\n    myField.getInputPlaceholder().then(function(placeholder) {\n      console.log('Input placeholder: ' + placeholder);\n    });"
            ],
            "itemtype": "method",
            "name": "getInputPlaceholder",
            "return": {
                "description": "Promise resolving with the input placeholder",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/MatchField.js",
            "line": 421,
            "description": "Gets the tags placeholder.",
            "example": [
                "\n\n    myField.getTagsPlaceholder().then(function(placeholder) {\n      console.log('Tags placeholder: ' + placeholder);\n    });"
            ],
            "itemtype": "method",
            "name": "getTagsPlaceholder",
            "return": {
                "description": "Promise resolving with the tags placeholder",
                "type": "Promise"
            },
            "class": "MatchTagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/SelectField.js",
            "line": 37,
            "description": "Gets field value.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log('Got value : ' + value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with the name of the selected option (not the value)",
                "type": "Promise"
            },
            "class": "SelectField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/SelectField.js",
            "line": 64,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue('new value').then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "The name of the option to select (not the value)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "SelectField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/SelectField.js",
            "line": 87,
            "description": "Clears field value.\n\nThis will select the first option of the select element.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "SelectField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 36,
            "description": "The list of available options.",
            "itemtype": "property",
            "name": "availableOptions",
            "type": "Array",
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 50,
            "description": "Selects a tag in auto complete.",
            "itemtype": "method",
            "name": "selectTagInAutoComplete",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "The",
                    "description": "value of the tag to select in the auto complete. It should be the same value as the\none in the available options",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when given tag has been selected in auto complete",
                "type": "Promise"
            },
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 80,
            "description": "Gets field values, the list of tags.",
            "example": [
                "\n\n    myField.getValue().then(function(tags) {\n      console.log(tags);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with the list of tags",
                "type": "Promise"
            },
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 113,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue(['tag 1', 'tag 2']).then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "values",
                    "description": "Field's list of tags",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 148,
            "description": "Sets field value using auto completion.",
            "example": [
                "\n\n    myField.setValueUsingAutoCompletion(['tag 1', 'tag 2']).then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValueUsingAutoCompletion",
            "params": [
                {
                    "name": "values",
                    "description": "Field's list of tags",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 184,
            "description": "Clears field value by removing all tags.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TagsField.js",
            "line": 212,
            "description": "Tests if a field is considered as on error.",
            "example": [
                "\n\n    myField.isOnError().then(function(isOnError) {\n      console.log('Is field on error ? ' + isOnError);\n    });"
            ],
            "itemtype": "method",
            "name": "isOnError",
            "return": {
                "description": "Promise resolving with a boolean indicating if the field is on error",
                "type": "Promise"
            },
            "class": "TagsField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TextField.js",
            "line": 35,
            "description": "Tag name of the text field.",
            "itemtype": "property",
            "name": "fieldTag",
            "type": "ElementFinder",
            "default": "\"input\"",
            "class": "TextField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TextField.js",
            "line": 51,
            "description": "Gets field value.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log('Got value : ' + value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with field value",
                "type": "Promise"
            },
            "class": "TextField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TextField.js",
            "line": 72,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue('new value').then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Field's value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "TextField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TextField.js",
            "line": 100,
            "description": "Clears field value.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "TextField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TextField.js",
            "line": 121,
            "description": "Tests if a field is considered as on error.",
            "example": [
                "\n\n    myField.isOnError().then(function(isOnError) {\n      console.log('Is field on error ? ' + isOnError);\n    });"
            ],
            "itemtype": "method",
            "name": "isOnError",
            "return": {
                "description": "Promise resolving with a boolean indicating if the field is on error",
                "type": "Promise"
            },
            "class": "TextField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TimeField.js",
            "line": 37,
            "description": "Gets field value.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log('Got value : ' + value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with field value",
                "type": "Promise"
            },
            "class": "TimeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TimeField.js",
            "line": 58,
            "description": "Sets field value.\n\nActually it's not possible to use the Web Driver to set the value of the input in time state.\nUntil this feature is added to the Web Driver, value of the input is set programmatically.\nBe careful events on the input won't be dispatched (change, click and so on).",
            "example": [
                "\n\n    myField.setValue('new value').then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Field's value format as hh:mm:ss",
                    "type": "String",
                    "optional": true,
                    "optdefault": "'00:00:00'"
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "TimeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TimeField.js",
            "line": 98,
            "description": "Clears field value.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "TimeField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TinyMCEField.js",
            "line": 37,
            "description": "Gets field value.",
            "example": [
                "\n\n    myField.getValue().then(function(value) {\n      console.log('Got value : ' + value);\n    });"
            ],
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "Promise resolving with field value",
                "type": "Promise"
            },
            "class": "TinyMCEField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TinyMCEField.js",
            "line": 53,
            "description": "Sets field value.",
            "example": [
                "\n\n    myField.setValue('new value').then(function() {\n      console.log('Value set');\n    });"
            ],
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "value",
                    "description": "Field's value",
                    "type": "String",
                    "optional": true,
                    "optdefault": "''"
                }
            ],
            "return": {
                "description": "Promise resolving when the field is filled",
                "type": "Promise"
            },
            "class": "TinyMCEField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/fields/TinyMCEField.js",
            "line": 75,
            "description": "Clears field value.",
            "example": [
                "\n\n    myField.clear().then(function() {\n      console.log('Field cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "Promise resolving when the field is cleared",
                "type": "Promise"
            },
            "class": "TinyMCEField",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 36,
            "description": "The entity provider that will be used by the Helper.",
            "itemtype": "property",
            "name": "provider",
            "type": "EntityProvider",
            "final": 1,
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 45,
            "description": "Protractor control flow.",
            "itemtype": "property",
            "name": "flow",
            "type": "ControlFlow",
            "final": 1,
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 54,
            "description": "The list of entity properties names which \"query\" parameter will search on when requesting the web service.\n\nIf the entity managed by the Helper is registered to be tested automatically by the core and has to be tested\non the \"query\" parameter, this property must list all possible values of the \"query\" parameter of a\nget /entityName request.",
            "example": [
                "\n\n    ['name', 'description'];"
            ],
            "itemtype": "property",
            "name": "textSearchProperties",
            "type": "Array",
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 70,
            "description": "The list of entity properties which sortBy will search on when requesting the web service.\n\nIf the entity managed by the Helper is registered to be tested automatically by the core and has to be tested\non the \"sortBy\" parameter, this property must list all possible values of the \"sortBy\" parameter of a\nget /entityName request with the expected type.\n\nPossible type valus are 'string', 'number' and 'date'.",
            "example": [
                "\n\n    [{\n      name: 'title',\n      type: 'string'\n    },{\n      name: 'description',\n      type: 'string'\n    },{\n      name: 'date',\n      type: 'number'\n    },{\n      name: 'state',\n      type: 'number'\n    },{\n      name: 'views',\n      type: 'number'\n    }]"
            ],
            "itemtype": "property",
            "name": "sortProperties",
            "type": "Array",
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 108,
            "description": "Adds multiple entities at the same time.\n\nThis method bypass the web browser to directly add entities into database.",
            "async": 1,
            "itemtype": "method",
            "name": "addEntities",
            "params": [
                {
                    "name": "entities",
                    "description": "A list of entities to add",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolving when entities are added with:\n  - **Array** The list of added entities",
                "type": "Promise"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 148,
            "description": "Adds multiple entities at the same time with automatic index.\n\nThis method bypass the web browser to directly add entities into database.\n\nAll created entities will have the same name suffixed by the index.",
            "example": [
                "\n\n    // With MyHelper extending Helper\n    var helper = new MyHelper();\n    helper.addEntitiesAuto('My entity', 2).then(function(entities) {\n      console.log('Entity \"My entity 0\" created');\n      console.log('Entity \"My entity 1\" created');\n      console.log(entities);\n    });",
                "\n\n    helper.addEntitiesAuto('My entity', 2, 2).then(function(entities) {\n      console.log('Entity \"My entity 2\" created');\n      console.log('Entity \"My entity 3\" created');\n      console.log(entities);\n    });"
            ],
            "async": 1,
            "itemtype": "method",
            "name": "addEntitiesAuto",
            "params": [
                {
                    "name": "name",
                    "description": "Base name of the entities to add",
                    "type": "String"
                },
                {
                    "name": "total",
                    "description": "Number of entities to add",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "Index to start from for the name suffix",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Promise resolving with the added entities",
                "type": "Promise"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 190,
            "description": "Removes multiple entities at the same time.\n\nThis method bypass the web browser to directly remove entities from database.",
            "async": 1,
            "itemtype": "method",
            "name": "removeEntities",
            "params": [
                {
                    "name": "entities",
                    "description": "A list of entities",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolving when entities are removed",
                "type": "Promise"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 230,
            "description": "Gets all entities from database.",
            "async": 1,
            "itemtype": "method",
            "name": "getEntities",
            "params": [
                {
                    "name": "filter",
                    "description": "Rules to filter entities",
                    "type": "ResourceFilter",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving with the list of entities",
                "type": "Promise"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 255,
            "description": "Removes all entities from database.",
            "async": 1,
            "itemtype": "method",
            "name": "removeAllEntities",
            "params": [
                {
                    "name": "safeEntities",
                    "description": "A list of entities to keep safe",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Promise resolving when all entities are removed",
                "type": "Promise"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 288,
            "description": "Translates a dictionary key.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "key",
                    "description": "The key to translate",
                    "type": "String"
                },
                {
                    "name": "dictionary",
                    "description": "The dictionary of translations",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The translated text",
                "type": "String"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 309,
            "description": "Gets entity object example to use with web service put /entityName.\n\nIf the entity managed by the Helper is registered to be tested automatically by the core, it needs to implement\nthis method which will be used to perform a put /entityName.",
            "itemtype": "method",
            "name": "getAddExample",
            "return": {
                "description": "The data to add",
                "type": "Object"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 322,
            "description": "Gets entity object example to use with web service post /entityName.\n\nIf the entity managed by the Helper is registered to be tested automatically by the core, it needs to implement\nthis method which will be used to perform a post /entityName.",
            "itemtype": "method",
            "name": "getUpdateExample",
            "return": {
                "description": "The data to perform the update",
                "type": "Object"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/helpers/Helper.js",
            "line": 335,
            "description": "Prepares an entity to be tested against an entity coming from a get /entityName/:id.\n\nAll properties of the returned object must match properties from a get /entityName/:id.\n\nIf the entity managed by the Helper is registered to be tested automatically by the core, it needs to implement\nthis method which will be used to perform a post /entityName.",
            "itemtype": "method",
            "name": "getValidationExample",
            "return": {
                "description": "The entity which will validate a get /entityName/:id response",
                "type": "Object"
            },
            "class": "Helper",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 58,
            "description": "List of alert elements.",
            "itemtype": "property",
            "name": "alertElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 67,
            "description": "Popover element.",
            "itemtype": "property",
            "name": "popoverElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 76,
            "description": "Button to toggle left menu.",
            "itemtype": "property",
            "name": "toggleLeftMenuLinkElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 85,
            "description": "Left menu wrapper element.\n\nDisplayed or not as the left menu is opened or not.",
            "itemtype": "property",
            "name": "leftMenuElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 96,
            "description": "Profile link element.",
            "itemtype": "property",
            "name": "profileLinkElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 105,
            "description": "Language link element to open the list of languages.",
            "itemtype": "property",
            "name": "languageLinkElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 114,
            "description": "Logout link element.",
            "itemtype": "property",
            "name": "logoutLinkElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 123,
            "description": "List of first level link elements in left menu.",
            "itemtype": "property",
            "name": "level1MenuLinkElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 132,
            "description": "List of back end translations.",
            "itemtype": "property",
            "name": "translations",
            "type": "Object",
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 146,
            "description": "Looks for a menu item and click on it.\n\nThis will look for the item in menu and sub menus to find the item by its name.",
            "itemtype": "method",
            "name": "clickMenuRecursive",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "elements",
                    "description": "Menu items elements",
                    "type": "ElementArrayFinder"
                },
                {
                    "name": "itemName",
                    "description": "Name of the menu item to look for",
                    "type": "ItemName"
                }
            ],
            "return": {
                "description": "A promise resolving when the menu item is clicked",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 221,
            "description": "Loads the page and select the first available language.\n\nThis will automatically select the first language in the list of available languages.",
            "example": [
                "\n\n    var BackEndPage = require('@openveo/test').e2e.pages.BackEndPage;\n\n    function MyBackEndPage() {\n      MyBackEndPage.super_.call(this);\n      this.path = 'be/myBackEndPage';\n    }\n\n    module.exports = MyBackEndPage;\n    util.inherits(MyBackEndPage, BackEndPage);\n\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.load().then(function() {\n      console.log('Page fully loaded in the first language');\n    });"
            ],
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promise resolving when the page is loaded and language changed",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 256,
            "description": "Sets page language.\n\nIt uses the top menu to change the language, a page reload will be performed.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    var languages = page.getLanguages();\n\n    page.logAsAdmin();\n    page.selectLanguage(languages[1]).then(function() {\n      console.log('Page reloaded in french');\n    });"
            ],
            "itemtype": "method",
            "name": "selectLanguage",
            "params": [
                {
                    "name": "language",
                    "description": "The language to load",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when the page is reloaded with the expected language",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 308,
            "description": "Gets language link element.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.click(page.getLanguageOption('fr')).then(function() {\n      console.log('Page is now in french');\n    });"
            ],
            "itemtype": "method",
            "name": "getLanguageOption",
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code to load (e.g. en)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The language option element",
                "type": "ElementFinder"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 327,
            "description": "Authenticates to the back end using the given account.\n\nIf an account is already logged in, it will be logged out.",
            "example": [
                "\n\n    var user = {\n      \"email\": \"some-user@veo-labs.com\",\n      \"password\": \"some-user\"\n    }\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAs(user).then(function() {\n      console.log('Logged as some-user');\n    });"
            ],
            "itemtype": "method",
            "name": "logAs",
            "params": [
                {
                    "name": "user",
                    "description": "Information about the user",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when authenticated to the back end",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 380,
            "description": "Authenticates to the back end using the given CAS account.\n\ncas-server-mock module must be used for this to work.\nAlso process.protractorConf.casConf.userIdAttribute should be set to the name of the CAS user attribute\nwhich must be used as user's login.\nIf an account is already logged in, it will be logged out.",
            "example": [
                "\n\n    var user =   {\n      name: 'test',\n      attributes: {\n        name: 'test',\n        mail: 'test@openveo.com',\n        groups: ['test-group1', 'test-group2']\n      }\n    };\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logToCasAs(user).then(function() {\n      console.log('Logged as test');\n    });"
            ],
            "itemtype": "method",
            "name": "logToCasAs",
            "params": [
                {
                    "name": "user",
                    "description": "Information about the CAS user",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when authenticated to the back end",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 435,
            "description": "Authenticates to the back end using the given LDAP account.\n\nprocess.protractorConf.ldapConf.userIdAttribute should be set to the name of the LDAP user attribute\nwhich must be used as user's login.\nIf an account is already logged in, it will be logged out.",
            "example": [
                "\n\n    var user = {\n      dn: 'cn=test,dc=test',\n      cn: 'test',\n      groups: 'test-group1,test-group2',\n      mail: 'test@openveo.com'\n    };\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logToLdapAs(user).then(function() {\n      console.log('Logged as test');\n    });"
            ],
            "itemtype": "method",
            "name": "logToLdapAs",
            "params": [
                {
                    "name": "user",
                    "description": "Information about the LDAP user",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when authenticated to the back end",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 488,
            "description": "Logs to the back end using the super administrator account.\n\nThe super administrator can perform any actions.\nIf an account is already logged in, it will be logged out.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin().then(function() {\n      console.log('Logged as super admin');\n    });"
            ],
            "itemtype": "method",
            "name": "logAsAdmin",
            "return": {
                "description": "Promise resolving when authenticated as the super administrator",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 509,
            "description": "Gets current logged in user.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin().then(function() {\n      console.log(page.getUser());\n    });"
            ],
            "itemtype": "method",
            "name": "getUser",
            "return": {
                "description": "The current logged in user",
                "type": "Object"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 527,
            "description": "Logs out current authenticated user.\n\nThis will lead to the login page.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.logout().then(function() {\n      console.log('Logged out');\n    });"
            ],
            "itemtype": "method",
            "name": "logout",
            "return": {
                "description": "Promise resolving when user is logged out and login page is displayed",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 579,
            "description": "Gets the list of available languages.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    console.log(page.getLanguages());"
            ],
            "itemtype": "method",
            "name": "getLanguages",
            "return": {
                "description": "The list of available languages",
                "type": "Array"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 595,
            "description": "Gets level 1 menu items.\n\nAll level 1 menu items will be returned with the promise unless itemName is specified then all elements\ncorresponding to the item name will be returned.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.getLevel1MenuItems('Rights').then(function(elements) {\n      console.log(elements);\n    });"
            ],
            "itemtype": "method",
            "name": "getLevel1MenuItems",
            "params": [
                {
                    "name": "itemName",
                    "description": "The translated name of the menu item to look for, leave empty to get all\nlevel 1 menu items",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving with the list of elements",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 635,
            "description": "Gets level 2 menu items.\n\nAll level 2 menu items will be returned with the promise unless itemName is specified then all elements\ncorresponding to the item name will be returned.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.getLevel2MenuItems('Rights', 'Users').then(function(elements) {\n      console.log(elements);\n    });"
            ],
            "itemtype": "method",
            "name": "getLevel2MenuItems",
            "params": [
                {
                    "name": "level1ItemName",
                    "description": "The translated name of the first level menu item to look for",
                    "type": "String"
                },
                {
                    "name": "level2ItemName",
                    "description": "The translated name of the second menu item to look for, leave empty to get all\nlevel 2 menu items",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving with the list of elements",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 682,
            "description": "Opens left menu.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.openMenu().then(function() {\n      console.log('Left menu opened');\n    });"
            ],
            "itemtype": "method",
            "name": "openMenu",
            "return": {
                "description": "Promise resolving when left menu is opened",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 718,
            "description": "Closes menu.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.closeMenu().then(function() {\n      console.log('Left menu closed');\n    });"
            ],
            "itemtype": "method",
            "name": "closeMenu",
            "return": {
                "description": "Promise resolving when menu is closed",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 755,
            "description": "Opens an item sub menu.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.openSubMenu('Rights').then(function() {\n      console.log('Rights sub menu opened');\n    });"
            ],
            "itemtype": "method",
            "name": "openSubMenu",
            "params": [
                {
                    "name": "itemName",
                    "description": "The name of the menu item",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when sub menu is opened",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 806,
            "description": "Tests if a sub menu is opened.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.isSubMenuOpened('Rights').then(function(isOpened) {\n      console.log('Is sub menu opened ?' + isOpened);\n    });"
            ],
            "itemtype": "method",
            "name": "isSubMenuOpened",
            "params": [
                {
                    "name": "itemName",
                    "description": "The name of the menu item",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with true if the sub menu is opened, false if it's closed",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 836,
            "description": "Closes an item sub menu by its name.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.closeSubMenu('Rights').then(function() {\n      console.log('Rights sub menu closed');\n    });"
            ],
            "itemtype": "method",
            "name": "closeSubMenu",
            "params": [
                {
                    "name": "itemName",
                    "description": "The name of the menu item having a sub menu",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when sub menu is closed",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 897,
            "description": "Clicks on a menu item.\n\nThis will look for the item in menu and sub menus to find the item by its name.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.clickMenu('Roles').then(function() {\n      console.log('Roles menu item clicked');\n    });"
            ],
            "itemtype": "method",
            "name": "clickMenu",
            "params": [
                {
                    "name": "itemName",
                    "description": "The name of the menu item",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when menu is clicked",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 926,
            "description": "Clicks on profile link.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.clickProfile().then(function() {\n      console.log('Profile link clicked');\n    });"
            ],
            "itemtype": "method",
            "name": "clickProfile",
            "return": {
                "description": "Promise resolving when profile link is clicked",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 945,
            "description": "Closes all alerts.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.closeAlerts().then(function() {\n      console.log('All alerts closed');\n    });"
            ],
            "itemtype": "method",
            "name": "closeAlerts",
            "return": {
                "description": "Promise resolving when all alerts are closed",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/BackEndPage.js",
            "line": 977,
            "description": "Gets all alert messages.",
            "example": [
                "\n\n    // With MyBackEndPage extending BackEndPage\n    var page = new MyBackEndPage();\n    page.logAsAdmin();\n    page.getAlertMessages().then(function(messages) {\n      console.log(messages);\n    });"
            ],
            "itemtype": "method",
            "name": "getAlertMessages",
            "return": {
                "description": "Promise resolving with all alert messages",
                "type": "Promise"
            },
            "class": "BackEndPage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 37,
            "description": "Protractor expected conditions.",
            "itemtype": "property",
            "name": "EC",
            "type": "ExpectedConditions",
            "final": 1,
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 46,
            "description": "Protractor control flow.",
            "itemtype": "property",
            "name": "flow",
            "type": "ControlFlow",
            "final": 1,
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 55,
            "description": "Body element.",
            "itemtype": "property",
            "name": "bodyElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 64,
            "description": "Page element.\n\nPage wrapper holding the content scrollbar.",
            "itemtype": "property",
            "name": "pageElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 80,
            "description": "Loads the page.",
            "example": [
                "\n\n    var Page = require('@openveo/test').e2e.pages.Page;\n\n    function MyPage() {\n      MyPage.super_.call(this);\n      this.path = 'be/myPage';\n    }\n\n    module.exports = MyPage;\n    util.inherits(MyPage, Page);\n\n    var page = new MyPage();\n    page.load().then(function() {\n      console.log('Page fully loaded');\n    });"
            ],
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "Promise resolving when the page is fully loaded",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 128,
            "description": "Gets page title as described by the HTMLTitleElement.",
            "example": [
                "\n\n    // With MyPage extending Page\n    var page = new MyPage();\n    assert.eventually.equal(page.getTitle(), 'My page title');"
            ],
            "itemtype": "method",
            "name": "getTitle",
            "return": {
                "description": "Promise resolving with the title of the page",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 144,
            "description": "Removes all cookies on the actual page.",
            "itemtype": "method",
            "name": "deleteCookies",
            "return": {
                "description": "Promise resolving when all cookies are deleted",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 154,
            "description": "Sends an http request and return its reponse.\n\nThis will execute the request from the page.",
            "params": [
                {
                    "name": "path",
                    "description": "Request's path",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "HTTP method to use",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Request's data to send in body",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving with the request's response",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 194,
            "description": "Refreshes actual page.",
            "itemtype": "method",
            "name": "refresh",
            "return": {
                "description": "Promise resolving when the page is fully loaded",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 211,
            "description": "Handles page loaded.\n\nUse this method to perform actions after the page is loaded. Typically, verify that the page is loaded by\nwaiting for elements to be present on the page.\n\nBy default it does nothing, override it to define your own behaviour.",
            "itemtype": "method",
            "name": "onLoaded",
            "return": {
                "description": "Promise resolving when the page is fully loaded",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/Page.js",
            "line": 225,
            "description": "Helper Url\nGet only current url path without host",
            "itemtype": "method",
            "name": "getPath",
            "return": {
                "description": "Promise resolving with current path",
                "type": "Promise"
            },
            "class": "Page",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 50,
            "description": "The entity provider.",
            "itemtype": "property",
            "name": "provider",
            "type": "EntityProvider",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 59,
            "description": "Form element to add a new entity.",
            "itemtype": "property",
            "name": "addFormElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 68,
            "description": "Link to open / close form element to add a new entity.",
            "itemtype": "property",
            "name": "addLinkElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 77,
            "description": "Wrapper of the add form element.\n\nThis element will be displayed when add form is displayed and hidden when add form is closed.",
            "itemtype": "property",
            "name": "addFormWrapperElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 91,
            "description": "Submit button of the form to add a new entity.",
            "itemtype": "property",
            "name": "addButtonElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 100,
            "description": "Table element.",
            "itemtype": "property",
            "name": "tableElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 109,
            "description": "Table row elements.",
            "itemtype": "property",
            "name": "rowElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 118,
            "description": "Table header elements.",
            "itemtype": "property",
            "name": "headerElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 127,
            "description": "Opened line detail containing information about the opened line.",
            "itemtype": "property",
            "name": "lineDetailElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 136,
            "description": "Checkbox to select all line.",
            "itemtype": "property",
            "name": "selectAllElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 145,
            "description": "Main action button element to perform actions on all selected lines.",
            "itemtype": "property",
            "name": "actionsButtonElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 154,
            "description": "Element holding the list of actions under main action button.",
            "itemtype": "property",
            "name": "actionsElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 163,
            "description": "Dialog box.",
            "itemtype": "property",
            "name": "dialogElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 172,
            "description": "Dialog box confirmation button.",
            "itemtype": "property",
            "name": "dialogConfirmActionButtonElement",
            "type": "ElementFinder",
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 180,
            "description": "Dialog box cancel button.",
            "itemtype": "property",
            "name": "dialogCancelActionButtonElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 189,
            "description": "Search engine form to filter lines in the table.",
            "itemtype": "property",
            "name": "searchFormElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 198,
            "description": "Link to open / close search engine.",
            "itemtype": "property",
            "name": "searchLinkElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 207,
            "description": "Element holding the current table page (pagination).",
            "itemtype": "property",
            "name": "currentPageElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 216,
            "description": "Element holding the total number of table pages (pagination).",
            "itemtype": "property",
            "name": "totalPagesElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 225,
            "description": "Element holding the total number of lines in all table pages (pagination).",
            "itemtype": "property",
            "name": "totalLinesElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 234,
            "description": "Pagination links wrapper.",
            "itemtype": "property",
            "name": "paginationElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 243,
            "description": "List of pagination links, including the previous and next range buttons.",
            "itemtype": "property",
            "name": "paginationLinkElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 252,
            "description": "List of pagination links, excluding the previous and next range buttons.",
            "itemtype": "property",
            "name": "paginationPageLinkElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 261,
            "description": "Pagination previous range link.",
            "itemtype": "property",
            "name": "paginationPreviousRangeElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 270,
            "description": "Pagination next range link.",
            "itemtype": "property",
            "name": "paginationNextRangeElement",
            "type": "ElementFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 279,
            "description": "List of per page links to select the number of elements to display per table page.",
            "itemtype": "property",
            "name": "itemsPerPageLinkElements",
            "type": "ElementArrayFinder",
            "final": 1,
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 295,
            "description": "Finds a line.\n\nIterate through the given list of lines to look for the expected one.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getLineByIndex",
            "params": [
                {
                    "name": "lines",
                    "description": "The list of line elements (tr elements) to look into",
                    "type": "Array"
                },
                {
                    "name": "name",
                    "description": "The name of the line to look for (this value will be compared to the value of each cell)",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "The index in lines to start from",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving with the tr element",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 340,
            "description": "Finds a line by page.\n\nIterate through all lines of all pages to look for the expected line.\nIt starts at current page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getLineByPage",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the line to look for (this value will be compared to the value of each cell)",
                    "type": "String"
                },
                {
                    "name": "totalPages",
                    "description": "The total number of pages",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving with the searched line (tr element)",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 395,
            "description": "Selects a page.\n\nLook for page link in pagination links, if page link is not in the pagination actual range, it will search for\nthe page link in the other pagination ranges.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "selectPageByRange",
            "params": [
                {
                    "name": "page",
                    "description": "The page to select (starting at 1 instead of 0)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when the page is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 458,
            "description": "Gets the index of a table column in the list of columns.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getHeaderIndex",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the header to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the index of the column",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 489,
            "description": "Gets column value for a list of lines.\n\nIterates through the given list of lines and find its value in the given column.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getLineValuesByIndex",
            "params": [
                {
                    "name": "lines",
                    "description": "The lines in the page (tr elements)",
                    "type": "Array"
                },
                {
                    "name": "headerIndex",
                    "description": "The index of the column to read",
                    "type": "Number"
                },
                {
                    "name": "index",
                    "description": "Current line index being inspected",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Promise resolving with lines values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 530,
            "description": "Gets column and field values for a list of lines.\n\nIterates through the given list of lines and get all information (column values and field values) for each line.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getAllLineDetailsByIndex",
            "params": [
                {
                    "name": "lines",
                    "description": "The lines in the page (tr elements)",
                    "type": "Array"
                },
                {
                    "name": "index",
                    "description": "Current line index being inspected",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Promise resolving with values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 574,
            "description": "Gets line column values in all pages.\n\nIterate through all lines of all pages and get column value for each line.\nIt starts at current page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getLineValuesByPage",
            "params": [
                {
                    "name": "headerIndex",
                    "description": "The index of the column to read",
                    "type": "Number"
                },
                {
                    "name": "totalPages",
                    "description": "The total number of pages",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving with column values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 642,
            "description": "Gets line fields values in all pages.\n\nIterate through all lines of all pages and get columns / fields values for each line.\nIt starts at current page.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getAllLineDetailsByPage",
            "params": [
                {
                    "name": "totalPages",
                    "description": "The total number of pages",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving with values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 711,
            "description": "Gets all lines in the table page except the opened one.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLinesInPage().then(function(lines) {\n      console.log(lines);\n    });"
            ],
            "itemtype": "method",
            "name": "getLinesInPage",
            "return": {
                "description": "Promise resolving with the list of lines elements in the page (tr elements)",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 748,
            "description": "Gets a line within the current page.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineInPage('My line').then(function(line) {\n      console.log(line);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineInPage",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the line to look for (each column will be compared to this value)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the line (tr element)",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 777,
            "description": "Gets the number of lines in the current page.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLinesInPageNumber().then(function(linesNumber) {\n      console.log('This page contains ' + linesNumber + ' lines');\n    });"
            ],
            "itemtype": "method",
            "name": "getLinesInPageNumber",
            "return": {
                "description": "Promise resolving with the number of lines in the page",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 799,
            "description": "Opens add form.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.openAddForm().then(function() {\n      console.log('Add form opened');\n    });"
            ],
            "itemtype": "method",
            "name": "openAddForm",
            "return": {
                "description": "Promise resolving when add form is opened",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 836,
            "description": "Closes formular to add an item.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.openAddForm();\n    page.closeAddForm().then(function() {\n      console.log('Add form closed');\n    });"
            ],
            "itemtype": "method",
            "name": "closeAddForm",
            "return": {
                "description": "Promise resolving when add form is closed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 875,
            "description": "Submit formular to add an item.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.submitAddForm().then(function() {\n      console.log('Add form submitted');\n    });"
            ],
            "itemtype": "method",
            "name": "submitAddForm",
            "return": {
                "description": "Promise resolving when add form submit button has been clicked",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 895,
            "description": "Gets a line.\n\nLooks for a line in all pages.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLine('My line').then(function(line) {\n      console.log(line);\n    });"
            ],
            "itemtype": "method",
            "name": "getLine",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving with the line (tr element)",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 943,
            "description": "Gets values of a column for all lines in all pages.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineValues('Name').then(function(values) {\n     console.log(values);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineValues",
            "params": [
                {
                    "name": "headerTitle",
                    "description": "Title of the column to extract values from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the list of values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 987,
            "description": "Gets values of a column for all lines in current page.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineInPageValues('Name').then(function(values) {\n     console.log(values);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineInPageValues",
            "params": [
                {
                    "name": "headerTitle",
                    "description": "Title of the column to extract values from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the list of values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1024,
            "description": "Gets all column / fields values for all lines in all pages.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getAllLineDetails().then(function(data) {\n     console.log(data);\n    });"
            ],
            "itemtype": "method",
            "name": "getAllLineDetails",
            "return": {
                "description": "Promise resolving with the list of line details",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1064,
            "description": "Gets all column / field values of a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineDetails('My line').then(function(data) {\n      console.log(data);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineDetails",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving with the line details",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1097,
            "description": "Gets all column values for a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineCells('My line').then(function(data) {\n      console.log(data);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineCells",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving with the line column values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1126,
            "description": "Gets all fields values for a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineFieldValues('My line').then(function(data) {\n      console.log(data);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineFieldValues",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving with the line fields values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1179,
            "description": "Opens a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.openLine('My line').then(function() {\n      console.log('My line opened');\n    });"
            ],
            "itemtype": "method",
            "name": "openLine",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving when line is opened",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1210,
            "description": "Closes opened line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.closeLine('My line').then(function() {\n      console.log('My line closed');\n    });"
            ],
            "itemtype": "method",
            "name": "closeLine",
            "return": {
                "description": "Promise resolving when line is closed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1258,
            "description": "Tests if a line is opened.\n\nAs only one line can be opened at a time, no name is required.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.isOpenedLine().then(function(isOpened) {\n      console.log('Is a line opened ? ' + isOpened);\n    });"
            ],
            "itemtype": "method",
            "name": "isOpenedLine",
            "return": {
                "description": "Promise resolving with a boolean indicating if a line is opened or not",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1299,
            "description": "Tests if a line is selected.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.isSelectedLine('my line name').then(function(isSelected) {\n      console.log('Is line selected ? ' + isSelected);\n    });"
            ],
            "itemtype": "method",
            "name": "isSelectedLine",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving with a boolean indicating if line is selected or not",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1326,
            "description": "Selects a line by checking the line checkbox.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectLine('My line').then(function() {\n      console.log('My line is selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectLine",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving when line is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1357,
            "description": "Deselects a line by clicking on the line checkbox.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.deselectLine('My line').then(function() {\n      console.log('My line is deselected');\n    });"
            ],
            "itemtype": "method",
            "name": "deselectLine",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving when line is deselected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1388,
            "description": "Selects all lines.\n\nAt least, one line must be in the table.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectAllLines().then(function() {\n      console.log('All lines selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectAllLines",
            "return": {
                "description": "Promise resolving when all lines are selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1416,
            "description": "Sorts lines.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.sortBy('Name', true).then(function() {\n      console.log('Lines sorted by Name');\n    });"
            ],
            "itemtype": "method",
            "name": "sortBy",
            "params": [
                {
                    "name": "name",
                    "description": "The value of the column to act on, each column will be compared to this value",
                    "type": "String"
                },
                {
                    "name": "asc",
                    "description": "true to sort in ascendant order, false to sort in descendant order",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Promise resolving when column is clicked",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1473,
            "description": "Performs an action on a single line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.performAction('My line', 'Remove').then(function() {\n      console.log('Action \"Remove\" has been performed on line \"My line\", confirmation dialog is opened');\n    });",
                "\n\n    page.performAction('My line', 'Remove', true).then(function() {\n      console.log('\"My line\" removed');\n    });"
            ],
            "itemtype": "method",
            "name": "performAction",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                },
                {
                    "name": "action",
                    "description": "The translated name of the action to perform",
                    "type": "String"
                },
                {
                    "name": "confirm",
                    "description": "true to confirm the action, false otherwise",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Promise resolving when action is performed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1527,
            "description": "Performs a grouped action.\n\nAt least one line must be selected.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectAllLines();\n    page.performMultipleAction('Remove').then(function() {\n      console.log('Action \"Remove\" performed on all selected lines, confirmation dialog is opened');\n    });",
                "\n\n    page.performMultipleAction('Remove', true).then(function() {\n      console.log('All lines removed');\n    });"
            ],
            "itemtype": "method",
            "name": "performMultipleAction",
            "params": [
                {
                    "name": "action",
                    "description": "The translated name of the action to perform",
                    "type": "String"
                },
                {
                    "name": "confirm",
                    "description": "true to confirm the action, false otherwise",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Promise resolving when the action is performed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1568,
            "description": "Accepts the confirmation dialog.\n\nConfirmation dialog must be displayed.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectAllLines();\n    page.performMultipleAction('Remove');\n    page.confirmAction().then(function() {\n      console.Log('Dialog confirmed, thus all selected lines are removed');\n    });"
            ],
            "itemtype": "method",
            "name": "confirmAction",
            "return": {
                "description": "Promise resolving when confirmation dialog has been accepted",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1598,
            "description": "Cancels the confirmation dialog.\n\nConfirmation dialog must be displayed.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectAllLines();\n    page.performMultipleAction('Remove');\n    page.cancelAction().then(function() {\n      console.Log('Remoe action canceled');\n    });"
            ],
            "itemtype": "method",
            "name": "cancelAction",
            "return": {
                "description": "Promise resolving when confirmation dialog has been canceled",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1627,
            "description": "Gets the list of available actions for a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineActions('My line').then(function(actions) {\n      console.log(actions);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineActions",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving whith the list of actions",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1672,
            "description": "Gets the list of global actions available.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getGlobalActions().then(function(actions) {\n      console.log(actions);\n    });"
            ],
            "itemtype": "method",
            "name": "getGlobalActions",
            "return": {
                "description": "Promise resolving whith the list of global actions",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1714,
            "description": "Searches in the list of lines using search engine.\n\nFills search fields.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n\n    var searchFieldsValues = {\n      myField: 'Value'\n    };\n\n    page.search(searchFieldsValues).then(function() {\n      console.Log('Search done');\n    });"
            ],
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "fields",
                    "description": "List of values for fields returned by method getSearchFields",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Promise resolving when search is done",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1752,
            "description": "Clears search fields.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.clearSearch().then(function() {\n      console.Log('Search engine cleared');\n    });"
            ],
            "itemtype": "method",
            "name": "clearSearch",
            "return": {
                "description": "Promise resolving when fields are cleared",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1782,
            "description": "Opens search engine.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.openSearchEngine().then(function() {\n      console.log('Search engine opened');\n    });"
            ],
            "itemtype": "method",
            "name": "openSearchEngine",
            "return": {
                "description": "Promise resolving when search engine is opened",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1820,
            "description": "Closes search engine.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.closeSearchEngine().then(function() {\n      console.log('Search engine closed');\n    });"
            ],
            "itemtype": "method",
            "name": "closeSearchEngine",
            "return": {
                "description": "Promise resolving when search engine is closed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1858,
            "description": "Gets current page number.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getCurrentPage().then(function(currentPage) {\n      console.log('Current page is ' + currentPage);\n    });"
            ],
            "itemtype": "method",
            "name": "getCurrentPage",
            "return": {
                "description": "Promise resolving with the current page (starting at 1)",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1880,
            "description": "Gets total number of pages.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getTotalPages().then(function(totalPages) {\n      console.log('There are ' + totalPages + ' pages');\n    });"
            ],
            "itemtype": "method",
            "name": "getTotalPages",
            "return": {
                "description": "Promise resolving with the total number of pages",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1902,
            "description": "Gets total number of lines.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getTotalLines().then(function(totalLines) {\n      console.log('There are ' + totalLines + ' lines');\n    });"
            ],
            "itemtype": "method",
            "name": "getTotalLines",
            "return": {
                "description": "Promise resolving with the total number of lines",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1924,
            "description": "Gets the total number of page links.\n\nGets the number of page links in the pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getTotalPaginationLinks().then(function(totalLinks) {\n      console.log('There are ' + totalLinks + ' pagination links');\n    });"
            ],
            "itemtype": "method",
            "name": "getTotalPaginationLinks",
            "return": {
                "description": "Promise resolving with the total number of links",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1949,
            "description": "Selects the first page in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectFirstPage().then(function() {\n      console.log('First page selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectFirstPage",
            "return": {
                "description": "Promise resolving when first page is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1969,
            "description": "Selects the last page in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectLastPage().then(function() {\n      console.log('Last page selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectLastPage",
            "return": {
                "description": "Promise resolving when last page is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 1993,
            "description": "Selects a page in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectPage(5).then(function() {\n      console.log('Page 5 selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectPage",
            "params": [
                {
                    "name": "page",
                    "description": "The page to select (starting at 1)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving when page is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2017,
            "description": "Selects first page range in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectFirstPageRange().then(function() {\n      console.log('First range selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectFirstPageRange",
            "return": {
                "description": "Promise resolving when first page range is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2049,
            "description": "Selects last page range in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectLastPageRange().then(function() {\n      console.log('Last range selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectLastPageRange",
            "return": {
                "description": "Promise resolving when last page range is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2083,
            "description": "Selects previous page range in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectPreviousPageRange().then(function() {\n      console.log('Previous range selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectPreviousPageRange",
            "return": {
                "description": "Promise resolving when previous page range is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2103,
            "description": "Selects next page range in pagination.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.selectNextPageRange().then(function() {\n      console.log('Next range selected');\n    });"
            ],
            "itemtype": "method",
            "name": "selectNextPageRange",
            "return": {
                "description": "Promise resolving when next page range is selected",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2123,
            "description": "Tests if previous page range link is enabled.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.isPreviousRangeLinkEnabled().then(function(isEnabled) {\n      console.log('Is previous range link enabled ?' + isEnabled);\n    });"
            ],
            "itemtype": "method",
            "name": "isPreviousRangeLinkEnabled",
            "return": {
                "description": "Promise resolving whith a boolean indicating if the previous range link is enabled",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2146,
            "description": "Tests if next page range link is enabled.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.isNextRangeLinkEnabled().then(function(isEnabled) {\n      console.log('Is next range link enabled ?' + isEnabled);\n    });"
            ],
            "itemtype": "method",
            "name": "isNextRangeLinkEnabled",
            "return": {
                "description": "Promise resolving whith a boolean indicating if the next range link is enabled",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2169,
            "description": "Sets the desired number of lines to display in the table.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.setLinesNumber(20).then(function() {\n      console.log('20 lines are now displayed per page');\n    });"
            ],
            "itemtype": "method",
            "name": "setLinesNumber",
            "params": [
                {
                    "name": "linesNumbers",
                    "description": "Either 5, 10, 20 or 30",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving when the expected number of lines is set",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2223,
            "description": "Moves the cursor over the \"select all\" checkbox to display the information popover.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.setSelectAllMouseOver().then(function() {\n      console.log('Mouse over the \"select all\" checkbox');\n    });"
            ],
            "itemtype": "method",
            "name": "setSelectAllMouseOver",
            "return": {
                "description": "Promise resolving when the mouse is over the \"select all\" checkbox",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2249,
            "description": "Tests if a header exists.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.isTableHeader('Action').then(function(isHeader) {\n      console.log('Is there a column title named \"Action\" ? ' + isHeader);\n    });"
            ],
            "itemtype": "method",
            "name": "isTableHeader",
            "params": [
                {
                    "name": "name",
                    "description": "The title of the header to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with a boolean indicating if the table header exists or not",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2284,
            "description": "Gets the index of a header in the list of headers.\n\nBe careful, the header index starts at 1 (not 0) due to the checkboxes occupying first column on each line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getTableHeaderIndex('Action').then(function(index) {\n      console.log('Action header index is ' + index);\n    });"
            ],
            "itemtype": "method",
            "name": "getTableHeaderIndex",
            "params": [
                {
                    "name": "name",
                    "description": "The title of the header to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the index of the header",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2330,
            "description": "Removes a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.removeLine('My line').then(function() {\n      console.log('Line removed');\n    });"
            ],
            "itemtype": "method",
            "name": "removeLine",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving when the line has been removed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2356,
            "description": "Removes all lines in the page.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.removeAllLinesInPage().then(function() {\n      console.log('All lines in the page have been removed');\n    });"
            ],
            "itemtype": "method",
            "name": "removeAllLinesInPage",
            "return": {
                "description": "Promise resolving when lines have been removed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2380,
            "description": "Removes all selected lines in the page.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.removeAllLinesInPage().then(function() {\n      console.log('Selected lines in the page have been removed');\n    });"
            ],
            "itemtype": "method",
            "name": "removeAllSelectedLinesInPage",
            "return": {
                "description": "Promise resolving when lines have been removed",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2404,
            "description": "Tests if the edition form is in error.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.isEditionFormOnError().then(function(isOnError) {\n      console.log('Is edition form on error ? ' + isOnError);\n    });"
            ],
            "itemtype": "method",
            "name": "isEditionFormOnError",
            "return": {
                "description": "Promise resolving with a boolean indicating if the edition form is on error",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2426,
            "description": "Gets the list of edition form error messages.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getEditionFormErrors().then(function(errors) {\n      console.log(errors);\n    });"
            ],
            "itemtype": "method",
            "name": "getEditionFormErrors",
            "return": {
                "description": "Promise resolving with the list of errors",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2464,
            "description": "Gets a field text for a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n\n    // Get text value of the \"title\" field for the line \"Line name\"\n    // \"title\" field must be defined by getEditFormFields() method\n    page.getLineFieldText('Line name', 'title').then(function(text) {\n      console.log(text);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineFieldText",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                },
                {
                    "name": "field",
                    "description": "The field id as described by getEditFormFields() method",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the field text",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2502,
            "description": "Gets column value for a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n\n    // Get value of the third column for the line \"Line name\"\n    page.getLineCellValue('Line name', 3).then(function(text) {\n      console.log(text);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineCellValue",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                },
                {
                    "name": "index",
                    "description": "Index of the column to read",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving with the cell value",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2529,
            "description": "Gets all column values for a line.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.getLineCellValues('Line name').then(function(cellValues) {\n      console.log(cellValues);\n    });"
            ],
            "itemtype": "method",
            "name": "getLineCellValues",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                }
            ],
            "return": {
                "description": "Promise resolving with all cell values",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2567,
            "description": "Tests if line cells contain a text.",
            "example": [
                "\n\n    // With MyTablePage extending TablePage\n    var page = new MyTablePage();\n    page.logAsAdmin();\n    page.load();\n    page.lineCellContain('Line name', 'Text').then(function(contain) {\n      console.log('Does my line \"Line name\" have a cell containing \"Text\" ? ' + contain);\n    });"
            ],
            "itemtype": "method",
            "name": "lineCellContain",
            "params": [
                {
                    "name": "lineFinder",
                    "description": "The name of the line (each column will be compared to this value) or\nthe line element",
                    "type": "String|ElementFinder"
                },
                {
                    "name": "value",
                    "description": "Value to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with a boolean indicating if the given value correspond to a cell",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2604,
            "description": "Adds a new line.\n\nUser must be logged and have permission to create line on this page.",
            "itemtype": "method",
            "name": "addLine",
            "params": [
                {
                    "name": "name",
                    "description": "Line name",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Additional data depending on page type",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving when the line has been added",
                "type": "Promise"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2618,
            "description": "Gets search engine fields.",
            "params": [
                {
                    "name": "Search",
                    "description": "engine form element",
                    "type": "ElementFinder"
                }
            ],
            "return": {
                "description": "The list of fields",
                "type": "Object"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2628,
            "description": "Gets add form fields.",
            "itemtype": "method",
            "name": "getAddFormFields",
            "params": [
                {
                    "name": "Add",
                    "description": "form element",
                    "type": "ElementFinder"
                }
            ],
            "return": {
                "description": "The list of fields",
                "type": "Object"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/pages/TablePage.js",
            "line": 2639,
            "description": "Gets edit form fields.",
            "itemtype": "method",
            "name": "getEditFormFields",
            "params": [
                {
                    "name": "Edit",
                    "description": "form element",
                    "type": "ElementFinder"
                }
            ],
            "return": {
                "description": "The list of fields",
                "type": "Obect"
            },
            "class": "TablePage",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/plugins/screenshotPlugin.js",
            "line": 35,
            "description": "Generates a screenshot each time a test failed.\n\nFor more more information about plugins refer to protractor's documentation available at\nhttps://github.com/angular/protractor/blob/master/docs/plugins.md",
            "class": "screenshotPlugin",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/browser.js",
            "line": 18,
            "description": "Writes screenshot to a file.",
            "itemtype": "method",
            "name": "writeScreenShot",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Screenshot data",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "Screenshot final file path",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to call when done\n  - **Error** The error if an error occurred, null otherwise",
                    "type": "Function"
                }
            ],
            "class": "browser",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/browser.js",
            "line": 36,
            "description": "Clicks on an element.\n\nThere are many issues with click events in web drivers, the same click is sometimes performed, and sometimes not.\nMoving the cursor to the element then performing a click seems to be more stable.\nIt also checks if the element is clickable before clicking on it.\n\nAlso the banner in position fix prevent the driver to click on elements behind it. To avoid this problem, scroll\nup to the element minus the height of the banner.",
            "itemtype": "method",
            "name": "click",
            "static": 1,
            "params": [
                {
                    "name": "elementFinder",
                    "description": "The element to click",
                    "type": "ElementFinder"
                },
                {
                    "name": "delay",
                    "description": "The delay in milliseconds to wait before clicking on the element",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Promise resolving when element is clicked",
                "type": "Promise"
            },
            "class": "browser",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/browser.js",
            "line": 80,
            "description": "Sets browser's size.",
            "example": [
                "\n\n    var browserAPI = require('@openveo/test').e2e.browser;\n    browserAPI.setSize(800, 600);"
            ],
            "itemtype": "method",
            "name": "setSize",
            "static": 1,
            "params": [
                {
                    "name": "width",
                    "description": "The browser width in px",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The browser height in px",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Promise resolving when the browser size is set",
                "type": "Promise"
            },
            "class": "browser",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/browser.js",
            "line": 98,
            "description": "Sets process.protractorConf to the configuration of the actual capability.",
            "example": [
                "\n\n    var browserAPI = require('@openveo/test').e2e.browser;\n    browserAPI.init();"
            ],
            "itemtype": "method",
            "name": "init",
            "static": 1,
            "return": {
                "description": "Promise resolving when init is done",
                "type": "Promise"
            },
            "class": "browser",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/browser.js",
            "line": 116,
            "description": "Disables all animations.",
            "example": [
                "\n\n    var browserAPI = require('@openveo/test').e2e.browser;\n    browserAPI.deactivateAnimations();"
            ],
            "itemtype": "method",
            "name": "deactivateAnimations",
            "static": 1,
            "class": "browser",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/browser.js",
            "line": 146,
            "description": "Takes a screenshot of the actual browser state.",
            "example": [
                "\n\n    var browserAPI = require('@openveo/test').e2e.browser;\n    browserAPI.takeScreenshot('/tmp', 'myScreenshot');"
            ],
            "itemtype": "method",
            "name": "takeScreenshot",
            "static": 1,
            "params": [
                {
                    "name": "file",
                    "description": "The screenshot file path",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "The screenshot file name without the extension",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving when the capture is made",
                "type": "Promise"
            },
            "class": "browser",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/i18n.js",
            "line": 16,
            "description": "Gets translations.",
            "example": [
                "\n\n    var i18n = require('@openveo/test').e2e.i18n;\n\n    i18n.getTranslations('login', 'en').then(function(translations) {\n      console.log(translations);\n    });"
            ],
            "itemtype": "method",
            "name": "getTranslations",
            "static": 1,
            "params": [
                {
                    "name": "dictionary",
                    "description": "The name of the dictionary, this is the name of the dictionary file without\nextension",
                    "type": "String"
                },
                {
                    "name": "languageCode",
                    "description": "The language code (e.g. en)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the list of translations",
                "type": "Promise"
            },
            "class": "i18n",
            "module": "e2e"
        },
        {
            "file": "lib/e2e/i18n.js",
            "line": 44,
            "description": "Gets the list of back end translations.",
            "example": [
                "\n\n    var i18n = require('@openveo/test').e2e.i18n;\n\n    i18n.getBackEndTranslations('en').then(function(backEndTranslations) {\n      console.log(backEndTranslations);\n    });"
            ],
            "itemtype": "method",
            "name": "getBackEndTranslations",
            "static": 1,
            "params": [
                {
                    "name": "languageCode",
                    "description": "The language code (e.g. en)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Promise resolving with the list of translations",
                "type": "Promise"
            },
            "class": "i18n",
            "module": "e2e"
        },
        {
            "file": "lib/unit/plugins/karma-ng-inline-templates-preprocessor/index.js",
            "line": 35,
            "description": "Defines inline template preprocessor function.",
            "params": [
                {
                    "name": "content",
                    "description": "The content of the file to preprocess",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "Information about the file",
                    "type": "Array"
                },
                {
                    "name": "done",
                    "description": "Function to call when preprocess of the file is done",
                    "type": "Function"
                }
            ],
            "class": "karma-ng-inline-templates-preprocessor",
            "module": "unit"
        },
        {
            "file": "lib/util.js",
            "line": 12,
            "description": "Executes a function then call done function.\n\nException thrown by the function are catched and transmitted to the done function.\n\nChai throws exceptions while an assertion fails which makes difficult writing ansynchronous tests.\nAssertions in asynchronous tests must be surrounding by try/catch and call the Mocha done callback with the\nerror in case of a failing assertion.",
            "itemtype": "method",
            "name": "check",
            "static": 1,
            "params": [
                {
                    "name": "testFunction",
                    "description": "The function to execute",
                    "type": "Function"
                },
                {
                    "name": "done",
                    "description": "The function to call after executing the testFunction function",
                    "type": "Function"
                },
                {
                    "name": "{Boolean]",
                    "description": "[doNotTerminate=false] Indicates if done function must not be called after executing the\ntestFunction function"
                }
            ],
            "class": "util",
            "module": "util"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nSends an http request and return its reponse.\n\nThis will execute the request from the page.",
            "line": " lib/e2e/pages/Page.js:154"
        },
        {
            "message": "Missing item type\nGets search engine fields.",
            "line": " lib/e2e/pages/TablePage.js:2618"
        },
        {
            "message": "Missing item type\nGenerates a screenshot each time a test failed.\n\nFor more more information about plugins refer to protractor's documentation available at\nhttps://github.com/angular/protractor/blob/master/docs/plugins.md",
            "line": " lib/e2e/plugins/screenshotPlugin.js:35"
        },
        {
            "message": "Missing item type\nDefines inline template preprocessor function.",
            "line": " lib/unit/plugins/karma-ng-inline-templates-preprocessor/index.js:35"
        }
    ]
}